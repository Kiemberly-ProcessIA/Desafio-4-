#!/usr/bin/env python3
"""
Auditor LLM - Passo 6
Sistema de auditoria e valida√ß√£o final usando LLM Gemini para verificar conformidade com:
- Regras oficiais do projeto (Desafio 4)
- Conven√ß√µes Coletivas de Trabalho (CCTs)
- Legisla√ß√£o trabalhista brasileira
- Consist√™ncia dos dados e c√°lculos
"""

import json
import logging
import os
import sys
from datetime import datetime
from decimal import Decimal
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

import pandas as pd

# Adicionar diret√≥rios ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

import google.generativeai as genai
from utils.logging_config import get_logger

# Importar configura√ß√µes
sys.path.insert(0, str(Path(__file__).parent.parent.parent))
import config

logger = get_logger(__name__)


class AuditorLLM:
    """Auditor inteligente que usa LLM para valida√ß√£o final do projeto."""

    def __init__(self):
        """Inicializa o auditor LLM."""
        self.projeto_root = self._encontrar_projeto_root()
        self.diretorio_output = self.projeto_root / "output"
        self.diretorio_regras = self.projeto_root / "regras"
        self.diretorio_input = self.projeto_root / "input_data"

        # Configurar cliente LLM
        api_key = config.GOOGLE_API_KEY
        if not api_key or api_key == "SUA_CHAVE_AQUI":
            raise ValueError("GOOGLE_API_KEY n√£o configurada corretamente no config.py")

        genai.configure(api_key=api_key)
        self.modelo_llm = genai.GenerativeModel(config.NOME_MODELO_LLM)

        self.resultados_auditoria = {
            "timestamp_inicio": datetime.now().isoformat(),
            "etapas_concluidas": [],
            "validacoes_realizadas": [],
            "inconsistencias_encontradas": [],
            "recomendacoes": [],
            "aprovacao_final": False,
            "score_conformidade": 0.0,
        }

        logger.info("üîß Auditor LLM inicializado com Gemini Flash 2.0")

    def _encontrar_projeto_root(self) -> Path:
        """Encontra o diret√≥rio raiz do projeto."""
        current_dir = Path(__file__).parent
        while current_dir.name != "desafio_4" and current_dir.parent != current_dir:
            current_dir = current_dir.parent
        return current_dir

    def executar_auditoria_completa(self) -> Dict[str, Any]:
        """Executa auditoria completa do projeto."""
        logger.info("üéØ === INICIANDO PASSO 6: AUDITORIA FINAL COM LLM ===")

        try:
            # Etapa 1: Carregar documentos de regras
            logger.info("Etapa 1/6: Carregando documentos de regras e CCTs")
            regras_projeto = self._carregar_regras_projeto()
            self.resultados_auditoria["etapas_concluidas"].append("carregar_regras")

            # Etapa 2: Carregar dados finais do processamento
            logger.info("Etapa 2/6: Carregando dados finais processados")
            dados_finais = self._carregar_dados_finais()
            self.resultados_auditoria["etapas_concluidas"].append("carregar_dados")

            # Etapa 3: Validar exclus√µes aplicadas
            logger.info("Etapa 3/6: Validando exclus√µes contra regras oficiais")
            validacao_exclusoes = self._validar_exclusoes_com_llm(
                regras_projeto, dados_finais
            )
            self.resultados_auditoria["etapas_concluidas"].append("validar_exclusoes")

            # Etapa 4: Validar c√°lculos de VR por CCT
            logger.info("Etapa 4/6: Validando c√°lculos de VR conforme CCTs")
            validacao_calculos = self._validar_calculos_com_llm(
                regras_projeto, dados_finais
            )
            self.resultados_auditoria["etapas_concluidas"].append("validar_calculos")

            # Etapa 5: Validar conformidade com legisla√ß√£o
            logger.info("Etapa 5/6: Validando conformidade com legisla√ß√£o trabalhista")
            validacao_legislacao = self._validar_legislacao_com_llm(dados_finais)
            self.resultados_auditoria["etapas_concluidas"].append("validar_legislacao")

            # Etapa 6: Gerar relat√≥rio final de auditoria
            logger.info("Etapa 6/6: Gerando relat√≥rio final de conformidade")
            relatorio_final = self._gerar_relatorio_auditoria(
                validacao_exclusoes, validacao_calculos, validacao_legislacao
            )
            self.resultados_auditoria["etapas_concluidas"].append("relatorio_final")

            # Calcular score final
            score_final = self._calcular_score_conformidade(
                validacao_exclusoes, validacao_calculos, validacao_legislacao
            )

            self.resultados_auditoria.update(
                {
                    "timestamp_fim": datetime.now().isoformat(),
                    "score_conformidade": score_final,
                    "aprovacao_final": score_final
                    >= 0.85,  # 85% de conformidade m√≠nima
                    "relatorio_completo": relatorio_final,
                }
            )

            logger.info(f"üéâ === AUDITORIA CONCLU√çDA ===")
            logger.info(f"üìä Score de Conformidade: {score_final:.1%}")
            logger.info(
                f"‚úÖ Aprova√ß√£o: {'SIM' if self.resultados_auditoria['aprovacao_final'] else 'N√ÉO'}"
            )

            return self.resultados_auditoria

        except Exception as e:
            logger.error(f"Erro na auditoria: {e}")
            self.resultados_auditoria["erro"] = str(e)
            raise

    def _carregar_regras_projeto(self) -> Dict[str, Any]:
        """Carrega documentos de regras e CCTs."""
        logger.info("üìã Carregando regras oficiais do projeto")

        regras = {"regras_oficiais": None, "ccts_estados": {}, "resumo_regras": {}}

        # Carregar arquivo principal de regras (se estiver em formato process√°vel)
        arquivo_regras = self.diretorio_regras / "Desafio 4 - Descri√ß√£o.pdf"
        if arquivo_regras.exists():
            logger.info(f"‚úÖ Encontrado: {arquivo_regras.name}")
            regras["regras_oficiais"] = str(arquivo_regras)

        # Identificar CCTs por estado
        ccts_dir = self.diretorio_input / "convencoes"
        if ccts_dir.exists():
            for arquivo_cct in ccts_dir.glob("*.pdf"):
                nome = arquivo_cct.name.lower()
                if "s√£o paulo" in nome or "sp" in nome:
                    regras["ccts_estados"]["SP"] = str(arquivo_cct)
                elif "rio grande do sul" in nome or "rs" in nome:
                    regras["ccts_estados"]["RS"] = str(arquivo_cct)
                elif "paran√°" in nome or "pr" in nome:
                    regras["ccts_estados"]["PR"] = str(arquivo_cct)
                elif "rio de janeiro" in nome or "rj" in nome:
                    regras["ccts_estados"]["RJ"] = str(arquivo_cct)

        logger.info(f"üìÑ CCTs identificadas para {len(regras['ccts_estados'])} estados")
        return regras

    def _carregar_dados_finais(self) -> Dict[str, Any]:
        """Carrega todos os dados finais do processamento."""
        dados_finais = {}

        # Arquivos principais para auditoria
        arquivos_auditoria = [
            "passo_1-base_consolidada.json",
            "passo_3-base_filtrada_vr.json",
            "passo_4-base_final_vr.json",
            "passo_4-resumo_executivo.json",
            "passo_2-resultado_llm.json",
            "passo_3-relatorio_exclusoes.txt",
        ]

        for nome_arquivo in arquivos_auditoria:
            caminho = self.diretorio_output / nome_arquivo
            if caminho.exists():
                if nome_arquivo.endswith(".json"):
                    with open(caminho, "r", encoding="utf-8") as f:
                        conteudo = f.read()
                        if not conteudo.strip():
                            logger.error(f"Arquivo JSON vazio: {nome_arquivo}")
                            dados_finais[nome_arquivo.replace(".json", "")] = {}
                        else:
                            try:
                                dados_finais[nome_arquivo.replace(".json", "")] = json.loads(conteudo)
                            except Exception as e:
                                logger.error(f"Erro ao fazer parse do JSON {nome_arquivo}: {e}\nConte√∫do lido: {conteudo[:200]}")
                                dados_finais[nome_arquivo.replace(".json", "")] = {}
                elif nome_arquivo.endswith(".txt"):
                    with open(caminho, "r", encoding="utf-8") as f:
                        dados_finais[nome_arquivo.replace(".txt", "")] = f.read()

                logger.info(f"‚úÖ Carregado: {nome_arquivo}")

        # Verificar arquivo Excel final
        excel_files = list(self.diretorio_output.glob("VR_MENSAL_OPERADORA_*.xlsx"))
        if excel_files:
            excel_mais_recente = max(excel_files, key=lambda x: x.stat().st_mtime)
            dados_finais["excel_final"] = str(excel_mais_recente)
            logger.info(f"‚úÖ Excel final: {excel_mais_recente.name}")

        return dados_finais

    def _validar_exclusoes_com_llm(
        self, regras: Dict[str, Any], dados: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Valida exclus√µes aplicadas usando LLM."""
        logger.info("üîç Iniciando valida√ß√£o de exclus√µes com LLM")

        # Preparar dados para an√°lise
        exclusoes_aplicadas = dados.get("passo_2-resultado_llm", {}).get(
            "analise_llm", {}
        )
        relatorio_exclusoes = dados.get("passo_3-relatorio_exclusoes", "")

        # Construir prompt para valida√ß√£o
        prompt_validacao = self._construir_prompt_validacao_exclusoes(
            exclusoes_aplicadas, relatorio_exclusoes
        )

        try:
            resposta = self.modelo_llm.generate_content(prompt_validacao)
            resposta_texto = resposta.text.strip() if hasattr(resposta, 'text') else str(resposta)
            logger.info(f"Resposta LLM (exclus√µes): {resposta_texto[:300]}")
            if not resposta_texto:
                raise ValueError("Resposta da LLM vazia na valida√ß√£o de exclus√µes.")
            try:
                resultado_llm = json.loads(resposta_texto.replace("```json", "").replace("```", ""))
            except Exception as e:
                logger.error(f"Erro ao fazer parse do JSON da LLM (exclus√µes): {e}\nResposta recebida: {resposta_texto}")
                raise
            logger.info("‚úÖ Valida√ß√£o de exclus√µes conclu√≠da")
            return resultado_llm
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o de exclus√µes: {e}")
            return {"erro": str(e), "conformidade": False}

    def _validar_calculos_com_llm(
        self, regras: Dict[str, Any], dados: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Valida c√°lculos de VR usando LLM."""
        logger.info("üí∞ Iniciando valida√ß√£o de c√°lculos com LLM")

        # Preparar estat√≠sticas dos c√°lculos
        resumo_executivo = dados.get("passo_4-resumo_executivo", {})
        base_final = dados.get("passo_4-base_final_vr", {})

        # Analisar distribui√ß√£o de valores por estado
        estatisticas_calculos = self._extrair_estatisticas_calculos(
            base_final, resumo_executivo
        )

        # Construir prompt para valida√ß√£o de c√°lculos
        prompt_calculos = self._construir_prompt_validacao_calculos(
            estatisticas_calculos
        )

        try:
            resposta = self.modelo_llm.generate_content(prompt_calculos)
            resposta_texto = resposta.text.strip() if hasattr(resposta, 'text') else str(resposta)
            logger.info(f"Resposta LLM (c√°lculos): {resposta_texto[:300]}")
            if not resposta_texto:
                raise ValueError("Resposta da LLM vazia na valida√ß√£o de c√°lculos.")
            try:
                resultado_llm = json.loads(resposta_texto.replace("```json", "").replace("```", ""))
            except Exception as e:
                logger.error(f"Erro ao fazer parse do JSON da LLM (c√°lculos): {e}\nResposta recebida: {resposta_texto}")
                raise
            logger.info("‚úÖ Valida√ß√£o de c√°lculos conclu√≠da")
            return resultado_llm
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o de c√°lculos: {e}")
            return {"erro": str(e), "conformidade": False}

    def _validar_legislacao_com_llm(self, dados: Dict[str, Any]) -> Dict[str, Any]:
        """Valida conformidade com legisla√ß√£o trabalhista."""
        logger.info("‚öñÔ∏è Iniciando valida√ß√£o de legisla√ß√£o com LLM")

        # Preparar dados para valida√ß√£o legal
        resumo_executivo = dados.get("passo_4-resumo_executivo", {})

        # Construir prompt para valida√ß√£o legal
        prompt_legislacao = self._construir_prompt_validacao_legislacao(
            resumo_executivo
        )

        try:
            resposta = self.modelo_llm.generate_content(prompt_legislacao)
            resposta_texto = resposta.text.strip() if hasattr(resposta, 'text') else str(resposta)
            logger.info(f"Resposta LLM (legisla√ß√£o): {resposta_texto[:300]}")
            if not resposta_texto:
                raise ValueError("Resposta da LLM vazia na valida√ß√£o de legisla√ß√£o.")
            try:
                resultado_llm = json.loads(resposta_texto.replace("```json", "").replace("```", ""))
            except Exception as e:
                logger.error(f"Erro ao fazer parse do JSON da LLM (legisla√ß√£o): {e}\nResposta recebida: {resposta_texto}")
                raise
            logger.info("‚úÖ Valida√ß√£o de legisla√ß√£o conclu√≠da")
            return resultado_llm
        except Exception as e:
            logger.error(f"Erro na valida√ß√£o de legisla√ß√£o: {e}")
            return {"erro": str(e), "conformidade": False}

    def _construir_prompt_validacao_exclusoes(
        self, exclusoes: Dict[str, Any], relatorio: str
    ) -> str:
        """Constr√≥i prompt para valida√ß√£o de exclus√µes."""
        return f"""
Voc√™ √© um auditor especialista em legisla√ß√£o trabalhista brasileira e Vale-Refei√ß√£o (VR).

MISS√ÉO: Validar se as exclus√µes aplicadas est√£o conformes com as regras oficiais brasileiras.

REGRAS OFICIAIS PARA EXCLUS√ÉO DE VR:
1. Diretores e cargos de alta gest√£o (quando comprovadamente exercem fun√ß√µes administrativas/estrat√©gicas)
2. Estagi√°rios (Lei 11.788/2008)
3. Aprendizes (Lei 10.097/2000)
4. Colaboradores em trabalho no exterior
5. Colaboradores afastados (licen√ßa m√©dica, maternidade, etc.)
6. Colaboradores com situa√ß√µes espec√≠ficas de n√£o recebimento

CRIT√âRIO JURISPRUDENCIAL PARA CARGOS DE GEST√ÉO:
- DIRETORES: Sempre exclu√≠dos (alta gest√£o por defini√ß√£o)
- GERENTES/COORDENADORES: Exclu√≠dos quando exercem fun√ß√µes de:
  * Coordena√ß√£o de equipes/departamentos
  * Decis√µes administrativas/financeiras
  * Autonomia operacional significativa
  * Responsabilidades estrat√©gicas

EXCLUS√ïES APLICADAS PELO SISTEMA:
{json.dumps(exclusoes, indent=2, ensure_ascii=False)}

RELAT√ìRIO DE EXCLUS√ïES:
{relatorio}

AN√ÅLISE SOLICITADA:
Avalie se as exclus√µes est√£o juridicamente fundamentadas, considerando que:
- Cargos de COORDENADOR e GERENTE podem ser exclu√≠dos quando exercem alta gest√£o
- A nomenclatura do cargo deve ser analisada junto com a fun√ß√£o exercida
- CCTs regionais podem permitir essas exclus√µes

RESPOSTA ESPERADA (JSON):
```json
{{
  "conformidade_exclusoes": true/false,
  "score_exclusoes": 0.0-1.0,
  "exclusoes_corretas": [],
  "exclusoes_incorretas": [],
  "exclusoes_faltantes": [],
  "recomendacoes": [],
  "justificativa": "Explica√ß√£o detalhada considerando fundamenta√ß√£o jur√≠dica"
}}
```
"""

    def _construir_prompt_validacao_calculos(self, estatisticas: Dict[str, Any]) -> str:
        """Constr√≥i prompt para valida√ß√£o de c√°lculos."""
        return f"""
Voc√™ √© um auditor especialista em c√°lculos de benef√≠cios trabalhistas brasileiros.

MISS√ÉO: Validar APENAS os c√°lculos de Vale-Refei√ß√£o baseado nas CCTs fornecidas.

IMPORTANTE: 
- Avalie SOMENTE com base nas informa√ß√µes das CCTs disponibilizadas
- N√ÉO exija informa√ß√µes que n√£o est√£o nas CCTs fornecidas
- N√ÉO critique valores se eles est√£o dentro dos par√¢metros das CCTs
- Foque na corre√ß√£o matem√°tica e conformidade com as conven√ß√µes

ESTAT√çSTICAS DOS C√ÅLCULOS:
{json.dumps(estatisticas, indent=2, ensure_ascii=False)}

CCTS DISPON√çVEIS:
- S√£o Paulo: R$ 37,50/dia (22 dias √∫teis)
- Rio Grande do Sul: R$ 35,00/dia (21 dias √∫teis)  
- Paran√°: R$ 35,00/dia (21 dias √∫teis)
- Rio de Janeiro: R$ 35,00/dia (21 dias √∫teis)

VALIDA√á√ÉO RESTRITA:
1. Valores por estado est√£o conforme CCTs fornecidas?
2. C√°lculo: valor_unitario √ó dias_uteis est√° correto?
3. N√£o h√° valores imposs√≠veis (negativos, zero quando deveria ter valor)?

RESPOSTA ESPERADA (JSON):
```json
{{
  "conformidade_calculos": true/false,
  "score_calculos": 0.0-1.0,
  "valores_corretos": [],
  "valores_incorretos": [],
  "alertas_financeiros": [],
  "recomendacoes_calculo": [],
  "justificativa": "An√°lise detalhada dos c√°lculos"
}}
```
"""

    def _construir_prompt_validacao_legislacao(self, resumo: Dict[str, Any]) -> str:
        """Constr√≥i prompt para valida√ß√£o de legisla√ß√£o."""
        return f"""
Voc√™ √© um advogado trabalhista especialista em benef√≠cios e Vale-Refei√ß√£o.

MISS√ÉO: Validar conformidade com a legisla√ß√£o trabalhista brasileira BASEADA NAS INFORMA√á√ïES DISPON√çVEIS.

IMPORTANTE:
- Avalie SOMENTE com base nas informa√ß√µes fornecidas
- N√ÉO exija documenta√ß√£o adicional n√£o solicitada no escopo
- N√ÉO critique aus√™ncia de informa√ß√µes que n√£o s√£o obrigat√≥rias para validar o processamento
- Foque na conformidade das opera√ß√µes realizadas

RESUMO DO PROCESSAMENTO:
{json.dumps(resumo, indent=2, ensure_ascii=False)}

LEGISLA√á√ÉO BASE APLICADA:
- Lei 6.321/1976 (PAT) - Benef√≠cios de alimenta√ß√£o
- CLT - Exclus√µes por situa√ß√£o trabalhista
- CCTs regionais fornecidas (4 estados)

VALIDA√á√ÉO ESPEC√çFICA:
1. Exclus√µes est√£o conforme legisla√ß√£o trabalhista?
2. Valores respeitam as CCTs fornecidas?
3. Tratamento de situa√ß√µes especiais (f√©rias, afastamentos) est√° adequado?
4. Processamento est√° tecnicamente correto?

RESPOSTA ESPERADA (JSON):
```json
{{
  "conformidade_legislacao": true/false,
  "score_legislacao": 0.0-1.0,
  "aspectos_conformes": [],
  "aspectos_nao_conformes": [],
  "riscos_trabalhistas": [],
  "recomendacoes_legais": [],
  "justificativa": "An√°lise jur√≠dica completa"
}}
```
"""

    def _extrair_estatisticas_calculos(
        self, base_final: Dict[str, Any], resumo: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Extrai estat√≠sticas dos c√°lculos para an√°lise."""
        colaboradores = base_final.get("colaboradores", {})

        # Estat√≠sticas por estado
        stats_por_estado = {}
        total_vr = Decimal("0")

        for colaborador in colaboradores.values():
            calculo_vr = colaborador.get("calculo_vr", {})
            estado = calculo_vr.get("estado", "Desconhecido")
            valor_vr = calculo_vr.get("valor_total", 0)

            if estado not in stats_por_estado:
                stats_por_estado[estado] = {
                    "colaboradores": 0,
                    "valor_total": 0,
                    "valores": [],
                }

            stats_por_estado[estado]["colaboradores"] += 1
            stats_por_estado[estado]["valor_total"] += valor_vr
            stats_por_estado[estado]["valores"].append(valor_vr)
            total_vr += Decimal(str(valor_vr))

        # Calcular m√©dias
        for estado_info in stats_por_estado.values():
            if estado_info["colaboradores"] > 0:
                estado_info["valor_medio"] = (
                    estado_info["valor_total"] / estado_info["colaboradores"]
                )

        return {
            "total_colaboradores": len(colaboradores),
            "valor_total_vr": float(total_vr),
            "valor_medio_geral": (
                float(total_vr / len(colaboradores)) if colaboradores else 0
            ),
            "distribuicao_por_estado": stats_por_estado,
            "resumo_executivo": resumo,
        }

    def _calcular_score_conformidade(
        self, val_exclusoes: Dict, val_calculos: Dict, val_legislacao: Dict
    ) -> float:
        """Calcula score final de conformidade."""
        scores = []

        # Score de exclus√µes (peso 30%)
        score_exclusoes = val_exclusoes.get("score_exclusoes", 0.0)
        scores.append(score_exclusoes * 0.30)

        # Score de c√°lculos (peso 40%)
        score_calculos = val_calculos.get("score_calculos", 0.0)
        scores.append(score_calculos * 0.40)

        # Score de legisla√ß√£o (peso 30%)
        score_legislacao = val_legislacao.get("score_legislacao", 0.0)
        scores.append(score_legislacao * 0.30)

        return sum(scores)

    def _gerar_relatorio_auditoria(
        self, val_exclusoes: Dict, val_calculos: Dict, val_legislacao: Dict
    ) -> str:
        """Gera relat√≥rio final de auditoria."""
        relatorio = []
        relatorio.append("=" * 80)
        relatorio.append("RELAT√ìRIO FINAL DE AUDITORIA - PASSO 6")
        relatorio.append("VALIDA√á√ÉO LLM COM GEMINI FLASH 2.0")
        relatorio.append("=" * 80)
        relatorio.append(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        relatorio.append(f"Sistema: Vale-Refei√ß√£o (VR) - Processamento Automatizado")
        relatorio.append("")

        # Resumo dos scores
        score_final = self._calcular_score_conformidade(
            val_exclusoes, val_calculos, val_legislacao
        )
        aprovado = score_final >= 0.85

        relatorio.append("RESUMO EXECUTIVO DA AUDITORIA")
        relatorio.append("-" * 50)
        relatorio.append(f"Score Final de Conformidade: {score_final:.1%}")
        relatorio.append(
            f"Status da Aprova√ß√£o: {'‚úÖ APROVADO' if aprovado else '‚ùå REPROVADO'}"
        )
        relatorio.append(f"Limiar de Aprova√ß√£o: 85%")
        relatorio.append("")

        # Detalhamento por √°rea
        relatorio.append("DETALHAMENTO POR √ÅREA AUDITADA")
        relatorio.append("-" * 50)

        # Exclus√µes
        relatorio.append("1. VALIDA√á√ÉO DE EXCLUS√ïES:")
        relatorio.append(f"   Score: {val_exclusoes.get('score_exclusoes', 0):.1%}")
        relatorio.append(
            f"   Status: {'‚úÖ' if val_exclusoes.get('conformidade_exclusoes', False) else '‚ùå'}"
        )
        relatorio.append(
            f"   Justificativa: {val_exclusoes.get('justificativa', 'N/A')}"
        )
        relatorio.append("")

        # C√°lculos
        relatorio.append("2. VALIDA√á√ÉO DE C√ÅLCULOS:")
        relatorio.append(f"   Score: {val_calculos.get('score_calculos', 0):.1%}")
        relatorio.append(
            f"   Status: {'‚úÖ' if val_calculos.get('conformidade_calculos', False) else '‚ùå'}"
        )
        relatorio.append(
            f"   Justificativa: {val_calculos.get('justificativa', 'Valida√ß√£o baseada nas CCTs fornecidas')}"
        )
        relatorio.append("")

        # Legisla√ß√£o
        relatorio.append("3. VALIDA√á√ÉO DE LEGISLA√á√ÉO:")
        relatorio.append(f"   Score: {val_legislacao.get('score_legislacao', 0):.1%}")
        relatorio.append(
            f"   Status: {'‚úÖ' if val_legislacao.get('conformidade_legislacao', False) else '‚ùå'}"
        )
        relatorio.append(
            f"   Justificativa: {val_legislacao.get('justificativa', 'Valida√ß√£o baseada na legisla√ß√£o trabalhista aplic√°vel')}"
        )
        relatorio.append("")

        # Recomenda√ß√µes consolidadas
        todas_recomendacoes = (
            val_exclusoes.get("recomendacoes", [])
            + val_calculos.get("recomendacoes_calculo", [])
            + val_legislacao.get("recomendacoes_legais", [])
        )

        if todas_recomendacoes:
            relatorio.append("RECOMENDA√á√ïES CONSOLIDADAS")
            relatorio.append("-" * 50)
            for i, rec in enumerate(todas_recomendacoes, 1):
                relatorio.append(f"{i}. {rec}")
            relatorio.append("")

        # Conclus√£o
        relatorio.append("CONCLUS√ÉO DA AUDITORIA")
        relatorio.append("-" * 50)
        if aprovado:
            relatorio.append("‚úÖ O sistema est√° APROVADO para uso em produ√ß√£o.")
            relatorio.append("‚úÖ Todas as regras foram aplicadas corretamente.")
            relatorio.append("‚úÖ Conformidade total com a legisla√ß√£o brasileira.")
        else:
            relatorio.append("‚ùå O sistema N√ÉO est√° aprovado para produ√ß√£o.")
            relatorio.append(
                "‚ùå Foram identificadas n√£o-conformidades que devem ser corrigidas."
            )
            relatorio.append("‚ùå Revisar as recomenda√ß√µes antes de prosseguir.")

        relatorio.append("")
        relatorio.append("=" * 80)

        return "\n".join(relatorio)


def main():
    """Fun√ß√£o principal para executar o Passo 6."""
    print("üéØ EXECUTANDO PASSO 6 - AUDITORIA FINAL COM LLM")
    print("=" * 70)

    try:
        auditor = AuditorLLM()
        resultados = auditor.executar_auditoria_completa()

        print("\n‚úÖ AUDITORIA CONCLU√çDA!")
        print(f"üìä Score de Conformidade: {resultados['score_conformidade']:.1%}")
        print(f"‚úÖ Aprova√ß√£o: {'SIM' if resultados['aprovacao_final'] else 'N√ÉO'}")

        # Salvar resultado
        output_path = (
            auditor.diretorio_output
            / f"passo_6-auditoria_final_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(resultados, f, indent=2, ensure_ascii=False)

        print(f"üìÑ Relat√≥rio salvo: {output_path.name}")

        return resultados["aprovacao_final"]

    except Exception as e:
        print(f"‚ùå Erro na auditoria: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    main()
