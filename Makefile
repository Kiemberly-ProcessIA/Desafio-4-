# =============================================================================
# SISTEMA DE PROCESSAMENTO DE VALE REFEI√á√ÉO COM IA (LLM)
# =============================================================================

.PHONY: help setup install clean run pipeline test debug

# Vari√°veis
PYTHON = python3
UV = uv
PROJECT_DIR = projeto_vr
OUTPUT_DIR = output
VENV_DIR = .venv

# Cores para output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

# =============================================================================
# COMANDOS PRINCIPAIS
# =============================================================================

help: ## üìã Mostrar esta ajuda
	@echo "$(BLUE)üöÄ SISTEMA DE PROCESSAMENTO VR COM IA$(NC)"
	@echo "$(BLUE)================================================$(NC)"
	@echo ""
	@echo "$(GREEN)COMANDOS PRINCIPAIS:$(NC)"
	@awk 'BEGIN {FS = ":.*##"} /^[a-zA-Z_-]+:.*##/ { printf "  $(YELLOW)%-12s$(NC) %s\n", $$1, $$2 }' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(GREEN)EXEMPLOS:$(NC)"
	@echo "  make setup      # Configurar ambiente"
	@echo "  make run        # Executar pipeline completo"
	@echo "  make clean      # Limpar arquivos tempor√°rios"
	@echo ""
	@echo "$(BLUE)üìÅ ESTRUTURA:$(NC)"
	@echo "  ‚Ä¢ input_data/   - Dados de entrada (colaboradores, configura√ß√µes)"
	@echo "  ‚Ä¢ output/       - Resultados finais (Excel, relat√≥rios)"
	@echo "  ‚Ä¢ config.py     - Configura√ß√µes do LLM (Gemini)"
	@echo ""
	@echo "$(BLUE)ü§ñ IA INTEGRADA:$(NC)"
	@echo "  ‚Ä¢ An√°lise inteligente de cargos"
	@echo "  ‚Ä¢ Consulta din√¢mica de feriados"
	@echo "  ‚Ä¢ Valores de VR atualizados por estado"

setup: ## üîß Configurar ambiente virtual e depend√™ncias
	@echo "$(BLUE)üîß Configurando ambiente...$(NC)"
	@if [ ! -d "$(VENV_DIR)" ]; then \
		echo "$(YELLOW)Criando ambiente virtual...$(NC)"; \
		$(UV) venv $(VENV_DIR); \
	else \
		echo "$(GREEN)‚úÖ Ambiente virtual j√° existe$(NC)"; \
	fi
	@echo "$(YELLOW)Instalando depend√™ncias...$(NC)"
	@$(UV) pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ Ambiente configurado com sucesso!$(NC)"

install: setup ## üì¶ Alias para setup (compatibilidade)

run: setup ## üöÄ Executar pipeline completo com IA e auditoria
	@echo "$(BLUE)üöÄ INICIANDO PIPELINE COMPLETO COM AUDITORIA...$(NC)"
	@echo "$(BLUE)=====================================================$(NC)"
	@echo "$(YELLOW)üßπ Limpando arquivos anteriores...$(NC)"
	@rm -rf $(OUTPUT_DIR)/*
	@mkdir -p $(OUTPUT_DIR)
	@echo "$(GREEN)‚úì Diret√≥rio output limpo$(NC)"
	@cd $(PROJECT_DIR) && $(UV) run main.py all --incluir-auditoria
	@echo ""
	@echo "$(GREEN)üéâ PIPELINE DE 6 PASSOS CONCLU√çDO COM AUDITORIA!$(NC)"
	@echo "$(YELLOW)üìÑ Verifique o relat√≥rio final em: output/RELATORIO_FINAL_PROJETO_VR_*.txt$(NC)"
	@echo "$(YELLOW)üìÑ Verifique o arquivo Excel final em: output/VR_MENSAL_OPERADORA_*.xlsx$(NC)"

pipeline: run ## üîÑ Alias para run (compatibilidade)

pipeline-simples: setup ## üìã Executar pipeline de 5 passos (sem auditoria)
	@echo "$(BLUE)üöÄ INICIANDO PIPELINE SIMPLES (5 PASSOS)...$(NC)"
	@echo "$(BLUE)================================================$(NC)"
	@echo "$(YELLOW)üßπ Limpando arquivos anteriores...$(NC)"
	@rm -rf $(OUTPUT_DIR)/*
	@mkdir -p $(OUTPUT_DIR)
	@echo "$(GREEN)‚úì Diret√≥rio output limpo$(NC)"
	@cd $(PROJECT_DIR) && $(UV) run main.py all
	@echo ""
	@echo "$(GREEN)üéâ PIPELINE DE 5 PASSOS CONCLU√çDO!$(NC)"
	@echo "$(YELLOW)üìÑ Verifique o arquivo Excel final em: output/VR_MENSAL_OPERADORA_*.xlsx$(NC)"

lint: setup ## üìù An√°lise de c√≥digo (flake8)
	@echo "$(BLUE)üìù Executando an√°lise de c√≥digo...$(NC)"
	@$(UV) pip install flake8
	@$(UV) run python -m flake8 $(PROJECT_DIR)/ --max-line-length=100 --ignore=E203,W503 || echo "$(YELLOW)‚ö†Ô∏è Lint com problemas$(NC)"

format: setup ## ‚ú® Formatar c√≥digo (black)
	@echo "$(BLUE)‚ú® Formatando c√≥digo...$(NC)"
	@$(UV) pip install black isort
	@$(UV) run python -m black $(PROJECT_DIR)/
	@$(UV) run python -m isort $(PROJECT_DIR)/
	@echo "$(GREEN)‚úÖ C√≥digo formatado$(NC)"

format-check: setup ## üîç Verificar formata√ß√£o (sem alterar)
	@echo "$(BLUE)üîç Verificando formata√ß√£o...$(NC)"
	@$(UV) pip install black isort
	@$(UV) run python -m black --check --diff $(PROJECT_DIR)/ || echo "$(YELLOW)‚ö†Ô∏è Black: Formata√ß√£o precisa de ajustes$(NC)"
	@$(UV) run python -m isort --check-only --diff $(PROJECT_DIR)/ || echo "$(YELLOW)‚ö†Ô∏è Isort: Formata√ß√£o precisa de ajustes$(NC)"

debug: setup ## üêõ Executar pipeline em modo DEBUG (gera JSONs intermedi√°rios)
	@echo "$(BLUE)üêõ Executando em modo DEBUG...$(NC)"
	@mkdir -p $(OUTPUT_DIR)
	@DEBUG=true cd $(PROJECT_DIR) && $(UV) run main.py pipeline
	@echo "$(YELLOW)üìä Arquivos de debug salvos em: output/$(NC)"

clean: ## üßπ Limpar arquivos tempor√°rios e cache
	@echo "$(BLUE)üßπ Limpando arquivos tempor√°rios...$(NC)"
	@rm -rf $(VENV_DIR)/ || true
	@rm -rf $(OUTPUT_DIR)/ || true
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -name "*.pyc" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úì Limpeza completa realizada$(NC)"

clean-output: ## üóëÔ∏è Limpar apenas arquivos de output
	@echo "$(BLUE)üóëÔ∏è Limpando apenas arquivos de output...$(NC)"
	@rm -rf $(OUTPUT_DIR)/*
	@mkdir -p $(OUTPUT_DIR)
	@echo "$(GREEN)‚úì Diret√≥rio output limpo$(NC)"
	@find . -name "*.pyo" -delete 2>/dev/null || true
	@find . -name "*Zone.Identifier" -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

# =============================================================================
# COMANDOS AVAN√áADOS (PASSOS INDIVIDUAIS)
# =============================================================================

step1: setup ## üìÇ Executar apenas Passo 1 (Consolida√ß√£o)
	@echo "$(BLUE)üìÇ Executando Passo 1: Consolida√ß√£o...$(NC)"
	@mkdir -p $(OUTPUT_DIR)
	@cd $(PROJECT_DIR) && $(UV) run main.py passo1

step2: setup ## ü§ñ Executar apenas Passo 2 (An√°lise IA)
	@echo "$(BLUE)ü§ñ Executando Passo 2: An√°lise com IA...$(NC)"
	@cd $(PROJECT_DIR) && $(UV) run main.py passo2-llm

step3: setup ## üîÑ Executar apenas Passo 3 (Aplicar Exclus√µes)
	@echo "$(BLUE)üîÑ Executando Passo 3: Aplicar Exclus√µes...$(NC)"
	@cd $(PROJECT_DIR) && $(UV) run main.py passo3

step4: setup ## üßÆ Executar apenas Passo 4 (C√°lculos)
	@echo "$(BLUE)üßÆ Executando Passo 4: C√°lculos...$(NC)"
	@cd $(PROJECT_DIR) && $(UV) run main.py passo4

step5: setup ## üìä Executar apenas Passo 5 (Excel Final)
	@echo "$(BLUE)üìä Executando Passo 5: Excel Final...$(NC)"
	@cd $(PROJECT_DIR) && $(UV) run main.py passo5

step6: setup ## üîç Executar apenas Passo 6 (Auditoria LLM)
	@echo "$(BLUE)üîç Executando Passo 6: Auditoria Final com LLM...$(NC)"
	@cd $(PROJECT_DIR) && $(UV) run main.py passo6

pipeline6: setup ## üöÄ Executar pipeline completo com 6 passos (incluindo auditoria)
	@echo "$(BLUE)üöÄ INICIANDO PIPELINE COMPLETO COM AUDITORIA...$(NC)"
	@echo "$(BLUE)=====================================================$(NC)"
	@echo "$(YELLOW)üßπ Limpando arquivos anteriores...$(NC)"
	@rm -rf $(OUTPUT_DIR)/*
	@mkdir -p $(OUTPUT_DIR)
	@echo "$(GREEN)‚úì Diret√≥rio output limpo$(NC)"
	@cd $(PROJECT_DIR) && $(UV) run main.py all --incluir-auditoria
	@echo ""
	@echo "$(GREEN)üéâ PIPELINE DE 6 PASSOS CONCLU√çDO!$(NC)"
	@echo "$(YELLOW)üìÑ Verifique o relat√≥rio final em: output/RELATORIO_FINAL_PROJETO_VR_*.txt$(NC)"

# =============================================================================
# INFORMA√á√ïES DO SISTEMA
# =============================================================================

status: ## ‚ÑπÔ∏è Mostrar status do projeto
	@echo "$(BLUE)‚ÑπÔ∏è STATUS DO PROJETO$(NC)"
	@echo "$(BLUE)===================$(NC)"
	@echo "$(YELLOW)üìÅ Diret√≥rio:$(NC) $(shell pwd)"
	@echo "$(YELLOW)üêç Python:$(NC) $(shell python3 --version 2>/dev/null || echo 'N√£o encontrado')"
	@echo "$(YELLOW)üì¶ UV:$(NC) $(shell uv --version 2>/dev/null || echo 'N√£o encontrado')"
	@echo "$(YELLOW)üåê Ambiente:$(NC) $(if $(wildcard $(VENV_DIR)),‚úÖ Configurado,‚ùå N√£o configurado)"
	@echo "$(YELLOW)üìÑ Dados:$(NC) $(if $(wildcard input_data/),‚úÖ Presentes,‚ùå Ausentes)"
	@echo "$(YELLOW)‚öôÔ∏è Config:$(NC) $(if $(wildcard config.py),‚úÖ Presente,‚ùå Ausente)"
	@if [ -f config.py ]; then \
		echo "$(YELLOW)ü§ñ LLM:$(NC) Gemini $(shell grep NOME_MODELO_LLM config.py | cut -d'"' -f2 2>/dev/null || echo 'N√£o configurado')"; \
	fi

config: ## ‚öôÔ∏è Verificar configura√ß√£o do LLM
	@echo "$(BLUE)‚öôÔ∏è CONFIGURA√á√ÉO DO LLM$(NC)"
	@echo "$(BLUE)=====================$(NC)"
	@if [ -f config.py ]; then \
		echo "$(GREEN)‚úÖ Arquivo config.py encontrado$(NC)"; \
		echo "$(YELLOW)ü§ñ Modelo:$(NC) $$(grep NOME_MODELO_LLM config.py | cut -d'"' -f2)"; \
		echo "$(YELLOW)üîë API Key:$(NC) $$(grep GOOGLE_API_KEY config.py | cut -d'"' -f2 | sed 's/.*\(.\{8\}\)/...\1/')"; \
	else \
		echo "$(RED)‚ùå Arquivo config.py n√£o encontrado!$(NC)"; \
		echo "$(YELLOW)üí° Crie o arquivo com suas credenciais do Google Gemini$(NC)"; \
	fi

# Comando padr√£o
.DEFAULT_GOAL := help
