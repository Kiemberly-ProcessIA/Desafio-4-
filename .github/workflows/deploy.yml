name: Deploy - Sistema VR

on:
  workflow_dispatch:
    inputs:
      comando:
        description: 'Comando do Makefile para executar'
        required: true
        default: 'run'
        type: choice
        options:
        - status
        - run
        - pipeline-simples
        - debug
      ambiente:
        description: 'Ambiente de execução'
        required: true
        default: 'homologacao'
        type: choice
        options:
        - homologacao
        - producao

env:
  PYTHON_VERSION: '3.11'

jobs:
  deploy-sistema-vr:
    name: Execução do Sistema
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.ambiente }}
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Instalar uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Setup ambiente
      run: make install
        
    - name: Configurar API Key
      run: |
        if [ "${{ github.event.inputs.ambiente }}" = "producao" ]; then
          cat > config.py << 'EOF'
        GOOGLE_API_KEY = "${{ secrets.GOOGLE_API_KEY }}"
        NOME_MODELO_LLM = "gemini-2.0-flash-001"
        EOF
        else
          cp config.py.example config.py
          sed -i 's/SUA_CHAVE_AQUI/FAKE_API_KEY_FOR_TESTING/' config.py
        fi
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        
    - name: Verificar sistema
      run: make status
        
    - name: Executar comando escolhido
      run: |
        case "${{ github.event.inputs.comando }}" in
          "status")
            echo "📊 Verificando status do sistema..."
            make status
            ;;
          "run")
            echo "🚀 Executando pipeline completo..."
            make run
            ;;
          "pipeline-simples")
            echo "📋 Executando pipeline simples..."
            make pipeline-simples
            ;;
          "debug")
            echo "🐛 Executando em modo debug..."
            make debug
            ;;
          *)
            echo "❌ Comando inválido: ${{ github.event.inputs.comando }}"
            exit 1
            ;;
        esac
        
    - name: Upload arquivos de output
      if: always() && (github.event.inputs.comando == 'run' || github.event.inputs.comando == 'pipeline-simples' || github.event.inputs.comando == 'debug')
      uses: actions/upload-artifact@v3
      with:
        name: resultado-${{ github.event.inputs.comando }}-${{ github.event.inputs.ambiente }}
        path: |
          output/
          !output/logs/
        retention-days: 30
        
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: logs-${{ github.event.inputs.comando }}-${{ github.event.inputs.ambiente }}
        path: output/logs/
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Relatório final
      if: always()
      run: |
        echo "## 📋 Relatório de Execução" >> $GITHUB_STEP_SUMMARY
        echo "- **Comando**: \`make ${{ github.event.inputs.comando }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Ambiente**: ${{ github.event.inputs.ambiente }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Data**: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "output" ]; then
          echo "### 📊 Resultados" >> $GITHUB_STEP_SUMMARY
          echo "- **Arquivos gerados**: $(find output -type f 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          
          if find output -name "VR_MENSAL_OPERADORA_*.xlsx" -type f 2>/dev/null | grep -q .; then
            echo "- **✅ Planilha final**: Gerada com sucesso" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event.inputs.comando }}" = "run" ] || [ "${{ github.event.inputs.comando }}" = "pipeline-simples" ]; then
            echo "- **❌ Planilha final**: Não encontrada" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "output/RELATORIO_FINAL_PROJETO_VR_"*.txt ]; then
            echo "- **✅ Relatório final**: Disponível" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **❌ Pasta output**: Não encontrada" >> $GITHUB_STEP_SUMMARY
        fi
